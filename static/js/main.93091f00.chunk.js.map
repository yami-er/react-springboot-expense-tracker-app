{"version":3,"sources":["AppNav.js","Category.js","Home.js","Expsenses.js","App.js","serviceWorker.js","index.js"],"names":["AppNav","state","Navbar","color","dark","expand","NavbarBrand","href","Nav","className","navbar","NavItem","NavLink","Component","Category","isLoading","Categories","fetch","response","json","body","this","setState","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","justifyContent","alignItems","height","fontFamily","map","category","id","name","Home","display","backgroundColor","Expsenses","props","emptyItem","description","expensedate","Date","location","date","item","handleSubmit","bind","handleChange","handleDateChange","event","method","headers","JSON","stringify","preventDefault","history","push","target","value","console","log","then","updatedExpenses","filter","i","responseExp","bodyExp","title","optionList","key","rows","expense","format","Button","size","onClick","remove","Container","Form","onSubmit","FormGroup","Label","for","Input","type","onChange","autoComplete","selected","tag","Link","to","Table","width","App","path","exact","component","Expsense","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sQA8BeA,E,4MA1BXC,MAAQ,G,uDAEJ,OACE,6BACE,kBAACC,EAAA,EAAD,CACAC,MAAM,OAAOC,MAAI,EAAEC,OAAO,MACxB,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,oBACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUC,QAAM,GAC7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASL,KAAK,KAAd,SAEF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASL,KAAK,eAAd,eAEF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASL,KAAK,aAAd,oB,GAhBCM,aCoDNC,G,kNAjDXb,MAAQ,CACJc,WAAY,EACZC,WAAa,I,oMAIQC,MAAM,mB,cAArBC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SAAS,CAACN,WAAaI,EAAOL,WAAW,I,qIAGxC,IAAD,EAC4BM,KAAKpB,MAA/Be,EADF,EACEA,WACP,OAFK,EACeD,UAER,2CAIJ,mCACI,kBAAC,EAAD,MACA,yBAAKQ,MAAO,CAERC,gBAAgB,6IAChBC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,YAClBC,eAAe,SACfC,WAAW,SACXC,OAAQ,UAGZ,yBAAMP,MAAS,CAACpB,MAAM,QAAQ4B,WAAW,YACzC,2CAIIf,EAAWgB,KAAK,SAAAC,GAAQ,OACpB,yBAAKC,GAAID,EAASC,IACbD,EAASE,e,GAxCnBtB,cC0BRuB,E,4MA3BXnC,MAAQ,G,uDAEJ,OACI,6BACC,kBAAC,EAAD,MACA,wBAAIsB,MACF,CAACc,QAAS,OACVlC,MAAM,QACLyB,eAAe,SACfC,WAAW,SACXC,OAAQ,QACRQ,gBAAgB,YAChBP,WAAW,UACXP,gBAAgB,8IAChBC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,cAXrB,sC,GANMd,a,uICgOJ0B,E,kDA5MX,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAVRC,UAAY,CACRC,YAAc,GACdC,YAAc,IAAIC,KAClBV,GAAG,IACHW,SAAW,GACXZ,SAAW,CAACC,GAAG,EAAIC,KAAK,WAO1B,EAAKlC,MAAQ,CACXc,WAAW,EACXC,WAAW,GACXuB,UAAY,GACZO,KAAM,IAAIF,KACVG,KAAO,EAAKN,WAGb,EAAKO,aAAc,EAAKA,aAAaC,KAAlB,gBACnB,EAAKC,aAAc,EAAKA,aAAaD,KAAlB,gBACnB,EAAKE,iBAAkB,EAAKA,iBAAiBF,KAAtB,gBAbR,E,kGAiBCG,G,8EAEXL,EAAO1B,KAAKpB,MAAM8C,K,SAGlB9B,MAAM,gBAAiB,CAC3BoC,OAAS,OACTC,QAAU,CACR,OAAU,mBACV,eAAgB,oBAElBlC,KAAOmC,KAAKC,UAAUT,K,OAGxBK,EAAMK,iBACNpC,KAAKmB,MAAMkB,QAAQC,KAAK,a,0IAIbP,GACX,IAAMQ,EAAQR,EAAMQ,OACdC,EAAOD,EAAOC,MACd1B,EAAOyB,EAAOzB,KAChBY,EAAK,eAAI1B,KAAKpB,MAAM8C,MACxBA,EAAKZ,GAAQ0B,EACbxC,KAAKC,SAAS,CAACyB,SACfe,QAAQC,IAAIhB,K,uCAIGD,GACf,IAAIC,EAAK,eAAI1B,KAAKpB,MAAM8C,MACxBA,EAAKJ,YAAaG,EAClBzB,KAAKC,SAAS,CAACyB,W,sEAIJb,G,4FACHjB,MAAM,iBAAD,OAAkBiB,GAAO,CAClCmB,OAAQ,SACRC,QAAU,CACR,OAAW,mBACX,eAAiB,sBAGlBU,MAAK,WACN,IAAIC,EAAkB,YAAI,EAAKhE,MAAMsC,WAAW2B,QAAO,SAAAC,GAAC,OAAIA,EAAEjC,KAAOA,KACrE,EAAKZ,SAAS,CAACiB,UAAY0B,O,kRAUPhD,MAAM,mB,cAAtBC,E,gBACYA,EAASC,O,cAArBC,E,OACNC,KAAKC,SAAS,CAACN,WAAaI,EAAOL,WAAW,I,SAGrBE,MAAM,iB,cAAzBmD,E,iBACgBA,EAAYjD,O,QAA5BkD,E,OACNhD,KAAKC,SAAS,CAACiB,UAAY8B,EAAUtD,WAAW,IAChD+C,QAAQC,IAAIM,G,sIAIN,IAAD,OACCC,EAAO,2CACNtD,EAAaK,KAAKpB,MAAlBe,WAFF,EAGyBK,KAAKpB,MAA5BsC,EAHF,EAGEA,UAGP,GANK,EAGYxB,UAIb,OAAO,4CAIX,IAAIwD,EACIvD,EAAWgB,KAAK,SAACC,GAAD,OACZ,4BAAQ4B,MAAO5B,EAASC,GAAIsC,IAAKvC,EAASC,IAC7BD,EAASE,SAI9BsC,EACAlC,EAAUP,KAAK,SAAA0C,GAAO,OACpB,wBAAIF,IAAKE,EAAQxC,IACf,4BAAKwC,EAAQhC,aACb,4BAAKgC,EAAQ7B,UACb,4BAAI,kBAAC,IAAD,CAAQC,KAAM4B,EAAQ/B,YAAagC,OAAO,gBAC9C,4BAAKD,EAAQzC,SAASE,MACtB,4BAAI,kBAACyC,EAAA,EAAD,CAAQC,KAAK,KAAK1E,MAAM,SAAS2E,QAAS,kBAAM,EAAKC,OAAOL,EAAQxC,MAApE,eAQZ,OACI,6BACI,kBAAC,EAAD,MAcA,kBAAC8C,EAAA,EAAD,KACKV,EAED,kBAACW,EAAA,EAAD,CAAMC,SAAU7D,KAAK2B,cACrB,kBAACmC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,eAAX,SACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,cAAcpD,KAAK,cAAcD,GAAG,cAC5CsD,SAAUnE,KAAK6B,aAAcuC,aAAa,UAIlD,kBAACN,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,YACA,4BAAQG,SAAUnE,KAAK6B,cACdqB,IAKb,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,QACA,kBAAC,IAAD,CAAeK,SAAUrE,KAAKpB,MAAM8C,KAAKJ,YAAc6C,SAAUnE,KAAK8B,oBAG1E,yBAAK1C,UAAU,OACX,kBAAC0E,EAAA,EAAD,CAAW1E,UAAU,iBACrB,kBAAC2E,EAAA,EAAD,CAAOC,IAAI,YAAX,YACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOpD,KAAK,WAAWD,GAAG,WAAWsD,SAAUnE,KAAK6B,iBAIpE,kBAACiC,EAAA,EAAD,KACI,kBAACP,EAAA,EAAD,CAAQzE,MAAM,UAAUoF,KAAK,UAA7B,QAAoD,IACpD,kBAACX,EAAA,EAAD,CAAQzE,MAAM,YAAYwF,IAAKC,IAAMC,GAAG,KAAxC,YAMb,GAEG,6BACE,4CACA,kBAACC,EAAA,EAAD,CAAOrF,UAAU,QACjB,+BACE,4BACE,wBAAIsF,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,YACA,qCACA,yCACA,wBAAIA,MAAM,OAAV,YAGJ,+BACItB,W,GAxMI5D,aCUTmF,E,4MAdX/F,MAAQ,G,uDAEJ,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACK,kBAAC,IAAD,CAAOgG,KAAK,IAAIC,OAAO,EAAMC,UAAW/D,IACxC,kBAAC,IAAD,CAAO6D,KAAK,cAAcC,OAAO,EAAMC,UAAWrF,IAClD,kBAAC,IAAD,CAAOmF,KAAK,YAAYC,OAAO,EAAMC,UAAWC,U,GARnDvF,aCMEwF,QACW,cAA7BC,OAAOzD,SAAS0D,UAEe,UAA7BD,OAAOzD,SAAS0D,UAEhBD,OAAOzD,SAAS0D,SAASC,MACvB,2D,OCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,a","file":"static/js/main.93091f00.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Nav,Navbar,NavItem,NavbarBrand, NavLink} from 'reactstrap';\r\n\r\nclass AppNav extends Component {\r\n    state = {  }\r\n    render() {\r\n        return (\r\n          <div>\r\n            <Navbar \r\n            color=\"dark\" dark  expand=\"md\">\r\n              <NavbarBrand href=\"/\">Expense Tracker </NavbarBrand>\r\n                <Nav className=\"ml-auto\" navbar>\r\n                  <NavItem>\r\n                    <NavLink href=\"/\">Home</NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink href=\"/categories\">Categories</NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink href=\"/expenses\">Expenses</NavLink>\r\n                  </NavItem>\r\n                \r\n                </Nav>\r\n          \r\n            </Navbar>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n \r\nexport default AppNav; ","import React, { Component } from 'react';\r\nimport AppNav from './AppNav';\r\nimport './new1.css'\r\n\r\nclass Category extends Component {\r\n\r\n    state = {  \r\n        isLoading : true,\r\n        Categories : []\r\n    }\r\n \r\n    async componentDidMount(){\r\n        const response=await fetch('/api/categories');\r\n        const body = await response.json();\r\n        this.setState({Categories : body , isLoading: false});\r\n    }\r\n\r\n    render() { \r\n        const {Categories , isLoading} = this.state;\r\n        if(isLoading) \r\n            return (<div>Loading...</div>);\r\n        \r\n        return ( \r\n            \r\n                <container>\r\n                    <AppNav/>\r\n                    <div style={{\r\n                \r\n                        backgroundImage:\"url(\" + \"https://images.unsplash.com/photo-1506543730435-e2c1d4553a84?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\" + \")\",\r\n                        backgroundPosition: 'center',\r\n                        backgroundSize: 'cover',\r\n                        backgroundRepeat: 'no-repeat',\r\n                        justifyContent:'center',\r\n                        alignItems:'center', \r\n                        height: '100vh',\r\n                        \r\n                }}  >\r\n                    <div  style = {{color:'brown',fontFamily:'cursive',}}>\r\n                    <h2 >Categories</h2>\r\n                    </div>\r\n                    \r\n                    {\r\n                        Categories.map( category => \r\n                            <div id={category.id}>\r\n                                {category.name}\r\n                            </div>\r\n                        )\r\n\r\n                    }\r\n</div>\r\n                </container>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Category;\r\n","import React, { Component } from 'react';\r\nimport AppNav from './AppNav';\r\nclass Home extends Component {\r\n    state = {}\r\n    render() { \r\n        return (\r\n            <div>\r\n             <AppNav/>\r\n             <h1 style={\r\n               {display: 'flex',\r\n               color:'black',  \r\n                justifyContent:'center',\r\n                alignItems:'center', \r\n                height: '100vh',\r\n                backgroundColor:'lightblue',\r\n                fontFamily:'cursive',\r\n                backgroundImage:\"url(\" + \"https://images.unsplash.com/photo-1504198266287-1659872e6590?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80\" + \")\",\r\n                backgroundPosition: 'center',\r\n                backgroundSize: 'cover',\r\n                backgroundRepeat: 'no-repeat'\r\n                \r\n                \r\n                }}>\r\n               Take control of your expense!\r\n               </h1>\r\n              </div>\r\n            );\r\n    }\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\r\nimport AppNav from './AppNav';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n//import './App.css';\r\nimport './new.css'\r\nimport { Table,Container,Input,Button,Label, FormGroup, Form} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport Moment from 'react-moment';\r\n\r\n\r\nclass Expsenses extends Component {\r\n\r\n    emptyItem = {\r\n        description : '' ,\r\n        expensedate : new Date(),\r\n        id:104,\r\n        location : '',\r\n        category : {id:1 , name:'Travel'}\r\n    }\r\n\r\n    \r\n    constructor(props){\r\n      super(props)\r\n\r\n      this.state = { \r\n        isLoading :false,\r\n        Categories:[],\r\n        Expsenses : [],\r\n        date :new Date(),\r\n        item : this.emptyItem\r\n       }\r\n\r\n       this.handleSubmit= this.handleSubmit.bind(this);\r\n       this.handleChange= this.handleChange.bind(this);\r\n       this.handleDateChange= this.handleDateChange.bind(this);\r\n\r\n    } \r\n\r\n    async handleSubmit(event){\r\n     \r\n      const item = this.state.item;\r\n    \r\n\r\n      await fetch(`/api/expenses`, {\r\n        method : 'POST',\r\n        headers : {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body : JSON.stringify(item),\r\n      });\r\n      \r\n      event.preventDefault();\r\n      this.props.history.push(\"/expenses\");\r\n    }\r\n\r\n\r\n    handleChange(event){\r\n      const target= event.target;\r\n      const value= target.value;\r\n      const name = target.name;\r\n      let item={...this.state.item};\r\n      item[name] = value;\r\n      this.setState({item});\r\n      console.log(item);\r\n    }\r\n\r\n\r\n    handleDateChange(date){\r\n      let item={...this.state.item};\r\n      item.expensedate= date;\r\n      this.setState({item});\r\n    \r\n    }\r\n\r\n    async remove(id){\r\n        await fetch(`/api/expenses/${id}` , {\r\n          method: 'DELETE' ,\r\n          headers : {\r\n            'Accept' : 'application/json',\r\n            'Content-Type' : 'application/json'\r\n          }\r\n\r\n        }).then(() => {\r\n          let updatedExpenses = [...this.state.Expsenses].filter(i => i.id !== id);\r\n          this.setState({Expsenses : updatedExpenses});\r\n        });\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n \r\n     \r\n\r\n        const response= await fetch('/api/categories');\r\n        const body= await response.json();\r\n        this.setState({Categories : body , isLoading :false});\r\n\r\n\r\n        const responseExp= await fetch('/api/expenses');\r\n        const bodyExp = await responseExp.json();\r\n        this.setState({Expsenses : bodyExp , isLoading :false});\r\n        console.log(bodyExp);\r\n\r\n    }\r\n\r\n    render() { \r\n        const title =<h3 >Add Expense</h3>;\r\n        const {Categories} =this.state;\r\n        const {Expsenses,isLoading} = this.state;\r\n        \r\n\r\n        if (isLoading)\r\n            return(<div>Loading....</div>)\r\n        \r\n\r\n\r\n        let optionList  =\r\n                Categories.map( (category) =>\r\n                    <option value={category.id} key={category.id}>\r\n                                {category.name} \r\n                    </option>\r\n                )\r\n        \r\n        let rows=\r\n            Expsenses.map( expense =>\r\n              <tr key={expense.id}>\r\n                <td>{expense.description}</td>\r\n                <td>{expense.location}</td>\r\n                <td><Moment date={expense.expensedate} format=\"YYYY/MM/DD\"/></td>\r\n                <td>{expense.category.name}</td>\r\n                <td><Button size=\"sm\" color=\"danger\" onClick={() => this.remove(expense.id)}>Delete</Button></td>\r\n\r\n              </tr>\r\n\r\n\r\n            )\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <AppNav/>\r\n               \r\n                {/* style = {{display: 'flex',\r\n               color:'red',  \r\n                justifyContent:'center',\r\n                alignItems:'center', \r\n                height: '500px',\r\n                backgroundColor:'lightblue',\r\n                fontFamily:'cursive',\r\n                backgroundImage:\"url(\" + \"https://images.unsplash.com/photo-1569174500295-f8df2974a0e3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\" + \")\",\r\n                backgroundPosition: 'center',\r\n                backgroundSize: 'cover',\r\n                backgroundRepeat: 'no-repeat'}}  */}\r\n                \r\n                <Container>\r\n                    {title}\r\n                    \r\n                    <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"description\">Title</Label>\r\n                        <Input type=\"description\" name=\"description\" id=\"description\" \r\n                            onChange={this.handleChange} autoComplete=\"name\"/>\r\n                    \r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Label for=\"category\" >Category</Label>\r\n                        <select onChange={this.handleChange}>\r\n                                {optionList}\r\n                        </select>\r\n                    \r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Label for=\"city\">Date</Label>\r\n                        <DatePicker    selected={this.state.item.expensedate}  onChange={this.handleDateChange} />\r\n                    </FormGroup>\r\n\r\n                    <div className=\"row\">\r\n                        <FormGroup className=\"col-md-4 mb-3\">\r\n                        <Label for=\"location\">Location</Label>\r\n                        <Input type=\"text\" name=\"location\" id=\"location\" onChange={this.handleChange}/>\r\n                        </FormGroup>\r\n                      \r\n                    </div>\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/\">Cancel</Button>\r\n                    </FormGroup>\r\n                    </Form>\r\n                {/* </Container> */}\r\n              \r\n\r\n          {''}\r\n              {/* <Container> */}\r\n              <div>\r\n                <h3>Expense List</h3>\r\n                <Table className=\"mt-4\">\r\n                <thead>\r\n                  <tr>\r\n                    <th width=\"30%\">Description</th>\r\n                    <th width=\"10%\">Location</th>\r\n                    <th> Date</th>\r\n                    <th> Category</th>\r\n                    <th width=\"10%\">Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                   {rows}\r\n                </tbody>\r\n\r\n                </Table>\r\n              {/* </Container> */}\r\n              </div>\r\n              </Container>\r\n\r\n        </div>\r\n\r\n        );\r\n    }\r\n    \r\n}\r\n \r\nexport default Expsenses;\r\n","import React, { Component } from 'react';\nimport { Route, BrowserRouter as Router,Switch} from 'react-router-dom'\nimport Category from './Category';\nimport Home from './Home';\nimport Expsense from './Expsenses';\n\nclass App extends Component {\n    state = {  }\n    render() { \n        return ( \n            <Router>\n                <Switch>\n                     <Route path='/' exact={true} component={Home}/>\n                     <Route path='/categories' exact={true} component={Category}/>\n                     <Route path='/expenses' exact={true} component={Expsense}/>\n                </Switch>\n             </Router>\n        );\n    }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Category from './Category';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n//ReactDOM.render(<Category />,document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}